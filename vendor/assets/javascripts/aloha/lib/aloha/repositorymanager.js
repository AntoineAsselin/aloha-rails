
define(['jquery','util/class','aloha/core','aloha/console','aloha/repositoryobjects'],function($,Class,Aloha,Console,__unused__){'use strict';var filter=(function(native){return(native?function(domain,predicate){return domain.filter(predicate);}:function(domain,predicate){var codomain=[];var i;for(i=0;i<domain.length;i++){if(predicate(domain[i])){codomain.push(domain[i]);}}
return codomain;});}(Array.prototype.hasOwnProperty('filter')));function bundle(items,meta){var result={items:items,results:items.length};if(meta){result.numItems=meta.numItems;result.hasMoreItems=meta.hasMoreItems;result.timeout=meta.timeout;}
return result;}
function report(callback,results){callback(results);}
var repositoryFilters={query:function(repository){return typeof repository.query==='function';},getChildren:function(repository){return typeof repository.getChildren==='function';},getSelectedFolder:function(repository){return typeof repository.getSelectedFolder==='function';}};var RepositoryManager=Class.extend({repositories:[],settings:(Aloha.settings&&Aloha.settings.repositories)||{},initialized:false,init:function(){var manager=this;if(typeof manager.settings.timeout==='undefined'){manager.settings.timeout=5000;}
var i;for(i=0;i<manager.repositories.length;i++){manager.initRepository(manager.repositories[i]);}
manager.initialized=true;},register:function(repository){var manager=this;if(!manager.getRepository(repository.repositoryId)){manager.repositories.push(repository);if(manager.initialized){manager.initRepository(repository);}}else{Console.warn(manager,'A repository with name "'
+repository.repositoryId
+'" already registerd. Ignoring this.');}},initRepository:function(repository){var manager=this;if(!repository.settings){repository.settings={};}
if(manager.settings[repository.repositoryId]){$.extend(repository.settings,manager.settings[repository.repositoryId]);}
repository.init();},getRepository:function(id){var manager=this;var i;for(i=0;i<manager.repositories.length;i++){if(manager.repositories[i].repositoryId===id){return manager.repositories[i];}}
return null;},query:function(params,callback){var manager=this;var i;var results=[];var allmetainfo={numItems:0,hasMoreItems:false};var numOpenQueries;var timeout=(params.timeout&&parseInt(params.timeout,10))||manager.settings.timeout;var timer=window.setTimeout(function(){allmetainfo=allmetainfo||{};allmetainfo.timeout=true;if(numOpenQueries>0){Console.warn(manager,numOpenQueries
+' repositories did not return before the '
+'configured timeout of '+timeout+'ms.');numOpenQueries=0;}
clearTimeout(timer);report(callback,bundle(results,allmetainfo));},timeout);var process=function(items,metainfo){var repository=this;if(0===numOpenQueries){return;}
if(items&&items.length){if(!items[0].repositoryId){var id=repository.repositoryId;var i;for(i=0;i<items.length;i++){items[i].repositoryId=id;}}
$.merge(results,items);}
if(metainfo&&allmetainfo){allmetainfo.numItems=($.isNumeric(metainfo.numItems)&&$.isNumeric(allmetainfo.numItems))?allmetainfo.numItems+metainfo.numItems:undefined;allmetainfo.hasMoreItems=(typeof metainfo.hasMoreItems==='boolean'&&typeof allmetainfo.hasMoreItems==='boolean')?allmetainfo.hasMoreItems||metainfo.hasMoreItems:undefined;if(metainfo.timeout){allmetainfo.timeout=true;}}else{allmetainfo=undefined;}
Console.debug(manager,'The repository '
+repository.repositoryId+'returned with '
+items.length+' results.');if(0===--numOpenQueries){clearTimeout(timer);report(callback,bundle(results,allmetainfo));}};var repositories=params.repositoryId?[manager.getRepository(params.repositoryId)]:manager.repositories;var queue=filter(repositories,repositoryFilters.query);if(0===queue.length){clearTimeout(timer);report(callback,bundle(results,allmetainfo));return;}
var makeProcess=function(repository){return function(){process.apply(repository,arguments);};};numOpenQueries=queue.length;for(i=0;i<queue.length;i++){queue[i].query(params,makeProcess(queue[i]));}},getChildren:function(params,callback){var manager=this;var i;var results=[];var numOpenQueries=0;var timeout=(params.timeout&&parseInt(params.timeout,10))||manager.settings.timeout;var timer=window.setTimeout(function(){if(numOpenQueries>0){Console.warn(manager,numOpenQueries
+' repositories did not respond before the '
+'configured timeout of '+timeout+'ms.');numOpenQueries=0;}
clearTimeout(timer);report(callback,results);},timeout);var process=function(items){if(0===numOpenQueries){return;}
if(items){$.merge(results,items);}
if(0===--numOpenQueries){clearTimeout(timer);report(callback,results);}};var repositories=params.repositoryId?[manager.getRepository(params.repositoryId)]:manager.repositories;if(params.repositoryFilter&&params.repositoryFilter.length){repositories=filter(repositories,function(repository){return-1<$.inArray(repository.repositoryId,params.repositoryFilter);});}
if('aloha'===params.inFolderId){var hasRepoFilter=params.repositoryFilter&&0<params.repositoryFilter.length;for(i=0;i<repositories.length;i++){results.push(new Aloha.RepositoryFolder({id:repositories[i].repositoryId,name:repositories[i].repositoryName,repositoryId:repositories[i].repositoryId,type:'repository',hasMoreItems:true}));}
clearTimeout(timer);report(callback,results);return;}
var queue=filter(repositories,repositoryFilters.getChildren);if(0===queue.length){clearTimeout(timer);report(callback,results);return;}
numOpenQueries=queue.length;for(i=0;i<queue.length;i++){queue[i].getChildren(params,process);}},makeClean:function(obj){var that=this,repository={},i=0,j=that.repositories.length;obj.find('[data-gentics-aloha-repository='+this.prefix+']').each(function(){while(i<j){repository.makeClean(obj);i+=1;}
Console.debug(that,'Passing contents of HTML Element with id { '+this.attr('id')+' } for cleaning to repository { '+repository.repositoryId+' }');repository.makeClean(this);});},markObject:function(obj,item){if(!obj){return;}
var manager=this;if(item){var repository=manager.getRepository(item.repositoryId);if(repository){$(obj).attr({'data-gentics-aloha-repository':item.repositoryId,'data-gentics-aloha-object-id':item.id});repository.markObject(obj,item);}else{Console.error(manager,'Trying to apply a repository "'
+item.name
+'" to an object, but item has no repositoryId.');}}else{$(obj).removeAttr('data-gentics-aloha-repository').removeAttr('data-gentics-aloha-object-id');}},getObject:function(element,callback){var manager=this;var $element=$(element);var itemId=$element.attr('data-gentics-aloha-object-id');var repositoryId=$element.attr('data-gentics-aloha-repository');var repository=manager.getRepository(repositoryId);if(repository&&itemId){if(!manager.itemCache){manager.itemCache=[];}
var cache=manager.itemCache[repositoryId];if(!cache){cache=manager.itemCache[repositoryId]=[];}
if(cache[itemId]){callback([cache[itemId]]);}else{repository.getObjectById(itemId,function(items){cache[itemId]=items[0];callback(items);});}}},folderOpened:function(folder){var repository=this.getRepository(folder.repositoryId);if(typeof repository.folderOpened==='function'){repository.folderOpened(folder);}},folderClosed:function(folder){var repository=this.getRepository(folder.repositoryId);if(typeof repository.folderClosed==='function'){repository.folderClosed(folder);}},folderSelected:function(folder){var repository=this.getRepository(folder.repositoryId);if(typeof repository.folderSelected==='function'){repository.folderSelected(folder);}},getSelectedFolder:function(){var repositories=filter(this.repositories,repositoryFilters.getSelectedFolder);var i;var selected;for(i=0;i<repositories.length;i++){selected=repositories[i].getSelectedFolder();if(selected){return selected;}}
return null;},toString:function(){return'repositorymanager';}});Aloha.RepositoryManager=new RepositoryManager();return Aloha.RepositoryManager;});